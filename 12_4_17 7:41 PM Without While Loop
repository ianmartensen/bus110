import seaborn
import pandas as pd
import scipy.stats
import matplotlib.pyplot as plt

allWines = pd.read_csv('winequality-both.csv', sep=',', header=0)
red = allWines.loc[allWines['type'] == 'red', :]
white = allWines.loc[allWines['type'] == 'white', :]

from pylab import savefig
import sqlite3

# create connection with database
conn = sqlite3.connect('C:/Users/Ian/Desktop/110aProject/LeVinEmployee.db') #Insert with your location of database

def login():
    user_email = input("What is your Email? ")

    with conn:
        # creating a cursor that will execute commands against the db
        cur = conn.cursor()

        try:
            while "@" not in user_email:
                user_email = input("Please enter a valid email address: ")

            cur.execute("SELECT Email FROM Employee WHERE (Email = '" + user_email + "')")
            # runs the SQL command and assigns the result of the command to a cursor object called cursor
            email_Info = cur.fetchone()  
            # if any info retrieved then user entered email is in the database
            if email_Info:
                user_pass = input("What is your Password? ")
                # find password entered by user in dataBase
                cur.execute("SELECT Password FROM Employee WHERE (Email = '" + user_email + "')")
                pass_Info = cur.fetchone()
                pass_Info = pass_Info[0]
                cur.execute("SELECT FirstName, LastName FROM Employee WHERE (Email = '" + user_email + "')")
                name_Info = cur.fetchall()
                
                #checks to see if the password entered matches pass_Info taken from database
                while user_pass != pass_Info:
                    user_pass = input("Password incorrect, please try again: ")
                #if the password is already correct it will then print a welcome message to the user
                if user_pass == pass_Info:
                    # Check if user entered password(user_pass) is the same as password in database(pass_info)
                    # print Name of User
                    global loginSuccesful
                    loginSuccesful = True
                    for row in name_Info:
                        return print("Welcome " + row[0] + " " + row[1]+ ".", end=' ')
                    
            else:
                print("Sorry that email does not exist. Please try again.")
                login()
                                 
        except ConnectionError:
            return print("Connection Failed")

        
        
def register():
    with conn:
        cur = conn.cursor()
        try:
            empID = input("To register a new employee, first enter his or her EmployeeID: ")  
            stripEmpID = empID.strip()
            #Checks if the variable is not equal to 4, if it isnt then it will force them to re-enter their information
            while len(stripEmpID) != 4:
                stripEmpID = input("Employee ID cannot be longer or shorter than 4 numbers and can only contain numbers, no letters. Please try again: ")
            
            #Checks if the variable is not in the form of digits only, if it isnt then it will force them to re-enter their information
            while not stripEmpID.isdigit():
                stripEmpID = input("Employee ID cannot be longer or shorter than 4 numbers and can only contain numbers, no letters. Please try again: ")
            #if the length of the entry is 4 numbers then it will proceed to the rest of the registration form.    
            if len(stripEmpID) == 4 and stripEmpID.isdigit():
                with conn:
        
                    try:
                        cur.execute("SELECT EmployeeID FROM Employee WHERE(EmployeeID ='" + stripEmpID + "')")
                        checkEmpID = cur.fetchone()
                        #checks to see if the ID entered already exists. If it does, it will require the user to re enter their ID.
                        while checkEmpID:
                            EmpID = input("That EmployeeID is already in use. Please enter a different EmployeeID: ")
                            stripEmpID = EmpID.strip()
                            cur.execute("SELECT EmployeeID FROM Employee WHERE(EmployeeID = '" + stripEmpID + "')")
                            checkEmpID = cur.fetchone()
                        print("EmployeeID, " + stripEmpID + ", is accepted")
                        
                        #List of requirements below and some constraints listed for them.
                        firstName     = input("\nWhat is your first name? ")
                        if firstName and firstName.isalpha():
                            pass
                        elif firstName and firstName.isdigit():
                            print ("Name must be Alphabet characters only!")
        
                        lastName      = input("What is your last name? ")
                        if lastName and lastName.isalpha():
                            pass
                        elif lastName and lastName.isdigit():
                            print ("Last name must be Alphabet characters only!")
                        
                        streetAddress = input("What is your street address? ")
                        
                        city          = input("What city do you live in? ")
                        if city and city.isalpha():
                            pass
                        elif city and city.isdigit():
                            print ("City must be Alphabet characters only!")
                        
                        state         = input("What state do you live in? ")
                        if state and state.isalpha():
                            pass
                        elif state and state.isdigit():
                            print ("State must be Alphabet characters only!")
                        
                        zipCode       = input("What is your zipcode? ")
                        
                        email         = input("What is your email? ")
                        
                        while "@" not in email:
                            email = input("Invalid email address, please try again: ")
                                
                        password      = input("What is your password? ")                    
        
                        cur.execute('''INSERT INTO Employee VALUES(?,?,?,?,?,?,?,?,?)''', (stripEmpID, firstName, lastName, streetAddress, city, state, zipCode, email, password))
                        conn.commit()
                        menuOptions()
                    except:
                        print("Connection Failed")
        except:
            print("Connection Failed")
            
def menuOptions():
    
    print("========= WELCOME TO THE WINE REPOSITORY =========")
    print("\nA) Login")
    print("B) Not a member? Register Here.")
    print("C) Exit the program")
    print("\n==================================================")

    menu_option = input("Please select an option to continue: ")
    menu_option = menu_option.lower()

    if menu_option == "a":
        login()
    elif menu_option == "b":
        register()
    elif menu_option == "c":
        exit()

def AssociationWhite(charX, charY):
 try:
     WineCharX = charX
     WineCharY = charY
     allWines = pd.read_csv('winequality-both.csv')
     # no white wine criteria
     getCorr = scipy.stats.pearsonr(white[WineCharX], white[WineCharY])
     correlation = str(getCorr[0])
     pValue = str(getCorr[1])
     print("For white wine, the correlation between " + WineCharX + " and " + WineCharY + " is " + correlation)
     print("With p value of: " + pValue)
 
     seaborn.lmplot(x=WineCharX, y=WineCharY, data=white)
     plt.xlabel(WineCharX)
     plt.ylabel(WineCharY)
     plt.title("White Wine: " + WineCharX + " X " + WineCharY)
     savefig("scatterplit1.png")
 except (KeyError) as e:
     print('Please check the spelling of the wine characteristics you want to test')
 
def AssociationRed(charX, charY):
  try:
      WineCharX = charX
      WineCharY = charY
      allWines = pd.read_csv('winequality-both.csv')
      red = allWines.loc[allWines['type'] == 'red', :]
      getCorr = scipy.stats.pearsonr(red[WineCharX], red[WineCharY])
      correlation = str(getCorr[0])
      pValue = str(getCorr[1])
      print("For red wine, the correlation between " + WineCharX + " and " + WineCharY + " is " + correlation)
      print("With p value of: " + pValue)
  
      seaborn.lmplot(x=WineCharX, y=WineCharY, data=red)
      plt.xlabel(WineCharX)
      plt.ylabel(WineCharY)
      plt.title("Red Wine: " + WineCharX + " X " + WineCharY)
      savefig("scatterplit1.png")
      plt.show()
  except (KeyError) as e:
      print('Please check the spelling of the wine characteristics you want to test')

def testFreqRed(WineCharTest):
    try:
        WineChar = WineCharTest
        WineCharValue = float(input("Please input a value you would like to test for: "))
        WineChar2 = "quality"
        
        allWines = pd.read_csv('winequality-both.csv')
        
        red = allWines.loc[allWines['type']== 'red', :]
        
        RedResidualSugar = red.loc[red[WineChar]== WineCharValue,:]
        
        WineCharValueDataset = RedResidualSugar.loc[:,WineChar2]
        
        seaborn.distplot(WineCharValueDataset, bins = 10, kde=False)
        
        plt.title(WineChar.title() + " Value " + str(WineCharValue) + " Frequencies By " + WineChar2.title())
        
        plt.ylabel('Number of Wines')
        
        plt.xlabel("Quality \n\nLow = 1-3, Medium = 4-6, High = 7-10")
        
        plt.xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        
    
    except (KeyError, ZeroDivisionError) as e:
        print (e)
        
def testFreqWhite(WineCharTest):
    try:
        WineChar = WineCharTest
        WineCharValue = float(input("Please input a value you would like to test for: "))
        WineChar2 = "quality"
        
        allWines = pd.read_csv('winequality-both.csv')
        
        white = allWines.loc[allWines['type']== 'white', :]
        
        WhiteResidualSugar = white.loc[white[WineChar]== WineCharValue,:]
        
        WineCharValueDataset = WhiteResidualSugar.loc[:,WineChar2]
        
        seaborn.distplot(WineCharValueDataset, bins = 10, kde=False)
        
        plt.title(WineChar.title() + " Value " + str(WineCharValue) + " Frequencies By " + WineChar2.title())
        
        plt.ylabel('Number of Wines')
        
        plt.xlabel("Quality \n\nLow = 1-3, Medium = 4-6, High = 7-10")
        
        plt.xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
    
    except (KeyError, ZeroDivisionError) as e:
        print (e)
        
        
def StartOptions():
    
    print("Would you like to test assosications or frequency distributions?")
    print("\nA) Test associations")
    print("\nB) Test Frequency distributions")
    
    menu_option1 = input("Please select an option to continue: ")
    menu_option1 = menu_option1.lower()
    
    if menu_option1 == "a":
        RedOrWhiteAss()
    if menu_option1 == "b":
        RedOrWhiteFreq()
    if menu_option1 == "x":
        global online
        online = False
            
#Red and White for Associations
def RedOrWhiteAss():
    print("A) Would you like to test for Red wine?")
    print("B) Would you like to test for White wine?")
    
    menu_option2 = input("\nPlease select an option to continue: ")
    menu_option2 = menu_option2.lower()
    
    if menu_option2 == "a":
        AssRed()
    if menu_option2 == "b":
        AssWhite()
    if menu_option2 == "x":
        global online
        online = False
        
#Red and White for Frequency
def RedOrWhiteFreq():
    print("A) Would you like to test for Red wine?")
    print("B) Would you like to test for White wine?")
    
    menu_option3 = input("\nPlease select an option to continue: ")
    menu_option3 = menu_option3.lower()
    
    if menu_option3 == "a":
        FreqRed()
    if menu_option3 == "b":
        FreqWhite()
    if menu_option3 == "x":
        global online
        online = False
 

def AssWhite():
    print("\nA) Test Association between volatile acidity and Wine Quality")
    print("\nB) Test Association between Fixed Acidity and Wine Quality")
    print("\nC) Test Association between Alcohol and Wine Quality")
    print("\nD) Test Association between Residual Sugar and Wine Quality")
    print("\nE) Test Association between Free Sulfur Dioxide and Wine Quality")
    print("\nF) Test Association between Total Sulfur Dioxide and Wine Quality")
     
    menu_option4 = input("\nPlease select an option to continue: ")
    menu_option4 = menu_option4.lower()
     
    if menu_option4 == "a":
     AssociationWhite(charX = "quality", charY = "volatile acidity")
    if menu_option4 == "b":
     AssociationWhite(charX = "quality", charY = "fixed acidity")
    if menu_option4 == "c":
     AssociationWhite(charX = "quality", charY = "alcohol")
    if menu_option4 == "d":
     AssociationWhite(charX = "quality", charY = "residual sugar")
    if menu_option4 == "e":
     AssociationWhite(charX = "quality", charY = "free sulfur dioxide")
    if menu_option4 == "f":
     AssociationWhite(charX = "quality", charY = "total sulfur dioxide")

def AssRed():
    print("\nA) Test Association between volatile acidity and Wine Quality")
    print("\nB) Test Association between Fixed Acidity and Wine Quality")
    print("\nC) Test Association between Alcohol and Wine Quality")
    print("\nD) Test Association between Residual Sugar and Wine Quality")
    print("\nE) Test Association between Free Sulfur Dioxide and Wine Quality")
    print("\nF) Test Association between Total Sulfur Dioxide and Wine Quality")
     
    menu_option4 = input("\nPlease select an option to continue: ")
    menu_option4 = menu_option4.lower()
     
    if menu_option4 == "a":
     AssociationRed(charX = "quality", charY = "volatile acidity")
    if menu_option4 == "b":
     AssociationRed(charX = "quality", charY = "fixed acidity")
    if menu_option4 == "c":
     AssociationRed(charX = "quality", charY = "alcohol")
    if menu_option4 == "d":
     AssociationRed(charX = "quality", charY = "residual sugar")
    if menu_option4 == "e":
     AssociationRed(charX = "quality", charY = "free sulfur dioxide")
    if menu_option4 == "f":
     AssociationRed(charX = "quality", charY = "total sulfur dioxide")
     
def FreqWhite():
    print("\nA) Test Frequency between volatile acidity and Wine Quality")
    print("\nB) Test Frequency between Fixed Acidity and Wine Quality")
    print("\nC) Test Frequency between Alcohol and Wine Quality")
    print("\nD) Test Frequency between Residual Sugar and Wine Quality")
    print("\nE) Test Frequency between pH and Wine Quality")
     
    menu_option4 = input("\nPlease select an option to continue: ")
    menu_option4 = menu_option4.lower()
     
    if menu_option4 == "a":        
     testFreqWhite(WineCharTest = "volatile acidity")
    if menu_option4 == "b":
     testFreqWhite(WineCharTest = "fixed acidity")
    if menu_option4 == "c":        
     testFreqWhite(WineCharTest = "alcohol")
    if menu_option4 == "d":       
     testFreqWhite(WineCharTest = "residual sugar")
    if menu_option4 == "e":
     testFreqWhite(WineCharTest = "pH")

def FreqRed():
    print("\nA) Test Frequency between volatile acidity and Wine Quality")
    print("\nB) Test Frequency between Fixed Acidity and Wine Quality")
    print("\nC) Test Frequency between Alcohol and Wine Quality")
    print("\nD) Test Frequency between Residual Sugar and Wine Quality")
    print("\nE) Test Frequency between pH and Wine Quality")
     
    menu_option4 = input("\nPlease select an option to continue: ")
    menu_option4 = menu_option4.lower()
     
    if menu_option4 == "a":                
     testFreqRed(WineCharTest = "volatile acidity")
    if menu_option4 == "b":                
     testFreqRed(WineCharTest = "fixed acidity")
    if menu_option4 == "c":             
     testFreqRed(WineCharTest = "alcohol")
    if menu_option4 == "d":              
     testFreqRed(WineCharTest = "residual sugar")
    if menu_option4 == "e":
     testFreqRed(WineCharTest = "pH")
          
if __name__ == "__main__":
    menuOptions()
    if loginSuccesful:
        StartOptions()
